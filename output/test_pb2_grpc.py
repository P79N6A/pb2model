# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import test_pb2 as test__pb2


class CommentReqStub(object):
  """The service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateComment = channel.unary_unary(
        '/customer.CommentReq/CreateComment',
        request_serializer=test__pb2.CommentRequest.SerializeToString,
        response_deserializer=test__pb2.CommonResponse.FromString,
        )


class CommentReqServicer(object):
  """The service definition.
  """

  def CreateComment(self, request, context):
    """Create a new BaseReq - A simple RPC
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CommentReqServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateComment': grpc.unary_unary_rpc_method_handler(
          servicer.CreateComment,
          request_deserializer=test__pb2.CommentRequest.FromString,
          response_serializer=test__pb2.CommonResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'customer.CommentReq', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
